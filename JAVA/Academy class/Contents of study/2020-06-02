
입출력의 개요
입출력은 데이터의 입력과 출력을 담당한다.

입력
외부에서 프로그램으로 들어오는 작업이다.

입력장치
프로그램이 처리할 데이터를 발생하는 장치로 키보드 등이 있다.

출력
프로그램에서 외부로 나가는 작업이다.

출력장치
프로그램에서 처리된 결과를 받아 보는 장치로 모니터 등이 있다.


입출력의 실행
데이터 소스
자바 애플리케이션에서 데이터를 읽어 들이는 입력 대상을 의미한다.
입력 대상은 키보드, 파일, 네트워크 등이 될 수 있다.

입력
데이터 소스에서 자바 애플리케이션으로 데이터를 읽어 들이는 작업을 의미한다.
자바에서는 입력 스트림이라고 한다.

출력
자바 애플리케이션에서 목적지로 데이터를 출력시키는 작업을 의미한다.
자바에서는 출력 스트림이라고 한다.

목적지
자바 애플리케이션의 데이터 출력 대상을 의미한다.
출력 대상은 모니터, 파일, 네트워크 등이 될 수 있다.



입출력의 스트림
영어인 stream의 의미는 연속 이어지는 의미로 흐름이 된다.
스트림은 데이터의 흐름으로 데이터 소스가 무엇인지를 나타낸다.
스트림은 여러 개의 조각으로 구성된 데이터를 만들거나 받을 수 있는 오브젝트를 의미한다.
애플리케이션이 데이터를 출력하거나 데이터를 읽어 들일 때 중간 매개체 역할을 하는 단위가 스트림이다.
스트림은 데이터를 원하는 곳으로 보내거나 받기 위한 통로로서 데이터를 전송하기 위한 파이프라고 할 수 있다.
데이터를 보내는 측과 데이터를 받는 측의 형태가 어떠한 것이든 간에 스트림을 통해서 추상화할 수 있다.
스트림은 입력 스트림과 출력 스트림으로 나누어진다.

입력 스트림
데이터 발생지인 입력장치에서 발생한 데이터가 프로그램으로 흘러 들어가는 것이다.

출력 스트림
프로그램에서 처리된 데이터들이 데이터 도착지인 출력장치에 흘러 들어가는 것이다.


파이프 구조
스트림은 먼저 보내진 데이터가 먼저 도착한다.
스트림은 데이터 발생지와 데이터 도착지에서 데이터의 순서가 바뀌지 않는다.

일방통행 구조
출력 스트림은 출력 용도로만 사용되고 입력 스트림은 입력 용도로만 사용된다.
양방향으로 데이터가 움직이기 위해서는 데이터를 내보내는 출력 스트림과 데이터를 가져오는 입력 스트림이
필요하다.



java.io 패키지의 개요
java.io 패키지는 파일이나 네트워크 등의 정보에 대한 입출력을 처리하는 클래스가 정의된 패키지다.
자바에서 제공하는 모든 클래스는 계층구조로 되어있다.


java.io 패키지의 자료형

Binary 자료형
binary 자료형은 이미지 파일 등과 같은 바이트 위주의 데이터 입출력 시 사용한다.
binary 자료형의 입력을 담당하는 최상위 클래스는 InputStream 추상 클래스이고 출력을 담당하는
최상위 클래스는 OutputStream 추상 클래스이다.
InputStream 추상 클래스와 OutputStream 추상 클래스는 일반적으로 하위 클래스인 구현체를 통해서 구현한다.

Text 자료형
text 자료형은 텍스트 위주의 데이터 입출력 시 사용한다.
text 자료형의 입력을 담당하는 최상위 클래스는 Reader 추상 클래스이고 출력을 담당하는 최상위 클래스는
Writer 추상 클래스이다.
Reader 추상 클래스와 Writer 추상 클래스는 일반적으로 하위 클래스인 구현체를 통해서 구현한다.


java.io 패키지의 입출력 처리

Node 계열
Node 계열은 입출력의 기본 처리를 가공되지 않은 데이터인 원시 데이터를 직접 처리하는 클래스 계열로
상위 클래스인 추상 클래스다.
원시 데이터는 입출력의 기본 처리 데이터인 byte 자료형과 같은 가공되지 않은 데이터를 의미한다.
Node 계열 클래스는 추상 클래스로만 입출력할 수 있으므로 입출력의 처리에서 비효율적이다.
비효율적인 입출력 처리는 다음과 같다.
데이터의 처리를 1byte씩만 처리하는 경우
데이터의 처리를 지정된 배열 크기까지만 처리가 가능한 경우
데이터의 처리를 char 자료형으로 형 변환시켜야 사용이 가능한 경우

Filter 계열
Filter 계열은 한 라인씩 데이터를 처리하는 경우와 같이 데이터를 효율적으로 처리한다.
Filter 계열의 클래스는 Node 계열 클래스의 구현체인 하위 클래스들이다.
Filter 계열의 클래스는 데코레이터 패턴에 의해서 원활한 입출력 작업을 할 수 있다.
데코레이터 패턴은 객체의 결합을 통해 기능을 동적으로 유연하게 확장할 수 있게 해 주는 패턴이다.
기본 기능에 추가할 수 있는 기능의 종류가 많은 경우에 각 추가 기능을 특정 클래스로 정의한 후 필
요한 객체를 조합함으로써 추가 기능의 조합을 설계 하는 방식이다.
기본 도로 표시 기능에 차선 표시, 교통량 표시, 교차로 표시, 단속 카메라 표시
데코레이터 패턴이 지원되므로 원하는 작업에 따라서 여러 가지 Filter 계열의 클래스를 사용하는 것이 가능하다.


파일 입출력의 개요
파일 입출력은 파일이나 디렉터리에 대해 제어를 한다.
파일 입출력은 파일이나 디렉터리와 연결하는 단위로 정보를 다룰 수 있다.

File 클래스
File 클래스의 개요
File 클래스는 파일과 디렉터리에 관련된 메타데이터인 파일 생성, 읽기와 쓰기 모드, 파일 크기 등과
같은 처리 작업을 담당한다.
File 클래스는 시스템에 존재하는 자원에 접근하여 프로그램에서 오브젝트로 이용할 수 있는 클래스다.



바이너리 입출력의 개요
바이너리 입출력은 바이트 스트림으로 입출력한다.
바이너리 입출력의 파일 접근은 이미지 파일처럼 바이트 단위로 처리할 수 있다.
바이너리 입출력 기능을 위해서 InputStream 추상 클래스와 OutputStream 추상 클래스를 제공한다.


InputStream 추상 클래스의 하위 클래스

FileInputStream 클래스
FileInputStream 클래스의 개요
FilelnputStream 클래스는 특정 파일로부터 바이트 단위로 데이터를 읽어 들인다.
FileInputStream 클래스는 출발 지점과 도착 지점을 연결하는 통로로 스트림을 생성한다.
FileInputStream 클래스의 생성자
FileInputStream 생성자
생성자로 실제 파일에 대한 접속으로 명명된 파일을 열고 생성한다.
FileInputStream(File file)
§ file 매개변수: 지정된 시스템의 파일이다.





























































